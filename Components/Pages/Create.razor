@page "/create"
@using TaskSystem.Data.Enums
@rendermode InteractiveServer

<PageTitle>Create Task</PageTitle>

<EditForm EditContext="_editContext" OnValidSubmit="@CreateTask" FormName="CreateTaskForm">
    <div class="form-group mb-2">
        <label for="@nameof(_task.Title)">@nameof(_task.Title)</label>
        <input @ref="_iautofocus" id="@nameof(_task.Title)" @bind="_task.Title" class="form-control" />
        <ValidationMessage For="() => _task.Title" />
    </div>
    <div class="form-group mb-2">
        <label for="@nameof(_task.Description)">@nameof(_task.Description)</label>
        <input id="@nameof(_task.Description)" @bind="_task.Description" class="form-control" />
        <ValidationMessage For="() => _task.Description" />
    </div>
    <div class="form-group mb-2">
        <label for="@nameof(_task.Comment)">@nameof(_task.Comment)</label>
        <input id="@nameof(_task.Comment)" @bind="_task.Comment" class="form-control" />
        <ValidationMessage For="() => _task.Comment" />
    </div>
    <div class="form-group mb-2">
        <label for="@nameof(_task.Priority)">@nameof(_task.Priority)</label>
        <select id="@nameof(_task.Priority)" @bind="_task.Priority" class="form-control">
            @foreach(var priority in Data.Enums.Priority.GetValues(typeof(Priority)))
            {
                <option value="@priority">@priority</option>
            }
        </select>
    </div>
    <button type="submit" class="btn btn-dark">Create</button>
</EditForm>

@implements IDisposable
@inject UpdateTitleService updateTitleService
@code {
    private DatabaseContext? _context;

    private Data.Models.Task _task = new();

    private EditContext? _editContext;

    private ValidationMessageStore? _messageStore;

    private ElementReference _iautofocus;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await _iautofocus.FocusAsync();
        }
    }
    protected override void OnInitialized()
    {
        _context ??= _contextFactory.CreateDbContext();
        _editContext = new(_task);
        _editContext.OnValidationRequested += HandleValidationRequested;
        _messageStore = new(_editContext);

        updateTitleService.UpdateTitle("Create Task");
    }

    private void CreateTask()
    {
        _context ??= _contextFactory.CreateDbContext();

        _task.DateCreated = DateTime.Now;
        _task.Status = Data.Enums.Status.Staged;

        _context?.Tasks.Add(_task);
        _context?.SaveChanges();
        
        NavigationManager.NavigateTo("tasks");
    }

    private void HandleValidationRequested(object? sender, ValidationRequestedEventArgs args)
    {
        _messageStore?.Clear();

        if (string.IsNullOrEmpty(_task.Title))
        {
            _messageStore?.Add(() => _task.Title!, "Enter a title");
        }
    }

    public void Dispose()
    {
        if (_editContext is not null)
        {
            _editContext.OnValidationRequested -= HandleValidationRequested;
        }
    }
}