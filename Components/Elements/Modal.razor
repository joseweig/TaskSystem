<div class="modal fade show" tabindex="-1" arial-modal="true" role="dialog" style="display:block; background-color: rgba(10,10,10,.8);">
    <div class="modal-dialog">
        <div class="modal-content">
        @switch(this.Buttons)
        {
            case ButtonType.DeleteCancel:
            <div class="modal-header bg-danger text-light">
                <h5 class="modal-title">@Title</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="Cancel"></button>
            </div>
                break;
            default:
            <div class="modal-header">
                <h5 class="modal-title">@Title</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="Cancel"></button>
            </div>
                break;
        }
            <div class="modal-body">
                <p>@Body</p>
            </div>
            <div class="modal-footer">
            @switch(this.Buttons)
            {
                case ButtonType.Ok:
                <button type="button" class="btn btn-primary" @onclick="Ok">Ok</button>
                    break;
                case ButtonType.OkCancel:
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="Cancel">Cancel</button>
                <button type="button" class="btn btn-dark" @onclick="Ok">Ok</button>
                    break;
                case ButtonType.DeleteCancel:
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="Cancel">Cancel</button>
                <button type="button" class="btn btn-danger" @onclick="Ok">Delete</button>
                    break;
            }
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string? Title { get; set; }

    [Parameter]
    public string? Body { get; set; }

    [Parameter]
    public ButtonType Buttons { get; set; }

    [Parameter]
    public EventCallback<bool> OnClose { get; set; }

    private Task Cancel()
    {
        return OnClose.InvokeAsync(false);
    }

    private Task Ok()
    {
        return OnClose.InvokeAsync(true);
    }

    public enum ButtonType
    {
        Ok,
        OkCancel,
        DeleteCancel
    }
}